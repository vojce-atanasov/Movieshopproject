// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movieshop.Data;

namespace Movieshop.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210420091249_book_mortalcombat")]
    partial class book_mortalcombat
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "b4280b6a-0613-4cbd-a9e6-f1701e926e73",
                            ConcurrencyStamp = "5a8774a5-e24d-4b6f-b13f-826569398f73",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b4280b6a -0613-4cbd-a9e6-f1701e926e74",
                            ConcurrencyStamp = "0d2d4b00-b80c-46db-9f03-35387c1e2bbd",
                            Name = "editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "b4280b6a-0613-4cbd-a9e6-f1701e926e75",
                            ConcurrencyStamp = "28ae1f27-9e3b-4023-94f9-afbfa5a7211a",
                            Name = "guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b4280b6a-0613-4cbd-a9e6-f1701e926e73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266 -b401-4519-9aeb-a9283053fc58",
                            Email = "admin@movieshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MOVIESHOP.COM",
                            NormalizedUserName = "ADMIN@MOVIESHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFKzO0aIhUeDjMQkD2poqla7Vtn2xkYIvoesaxCE4KrH+eMet93KEguClRhvc1K/2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin@movieshop.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b4280b6a-0613-4cbd-a9e6-f1701e926e73",
                            RoleId = "b4280b6a-0613-4cbd-a9e6-f1701e926e73"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Movieshop.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Awards")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("YearsActive")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Awards = "33",
                            BirthDate = new DateTime(2021, 4, 20, 11, 12, 48, 66, DateTimeKind.Local).AddTicks(7827),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Silvester Stalone",
                            YearsActive = "1968–present"
                        },
                        new
                        {
                            Id = 2,
                            Awards = "119",
                            BirthDate = new DateTime(2021, 4, 20, 11, 12, 48, 67, DateTimeKind.Local).AddTicks(1528),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Brad Pitt",
                            YearsActive = " 1987–present"
                        },
                        new
                        {
                            Id = 3,
                            Awards = "60",
                            BirthDate = new DateTime(2021, 4, 20, 11, 12, 48, 67, DateTimeKind.Local).AddTicks(1604),
                            Country = "USA",
                            Gender = "Female",
                            Name = "Angelina Jolie",
                            YearsActive = "1982–present"
                        },
                        new
                        {
                            Id = 4,
                            Awards = "1",
                            BirthDate = new DateTime(2021, 4, 20, 11, 12, 48, 67, DateTimeKind.Local).AddTicks(1612),
                            Country = "UK",
                            Gender = "Male",
                            Name = "Jason Statham",
                            YearsActive = "1993–present"
                        },
                        new
                        {
                            Id = 5,
                            Awards = "61",
                            BirthDate = new DateTime(2021, 4, 20, 11, 12, 48, 67, DateTimeKind.Local).AddTicks(1618),
                            Country = "USA",
                            Gender = "Female",
                            Name = "Julia Roberts",
                            YearsActive = " 1987–present"
                        },
                        new
                        {
                            Id = 6,
                            Awards = "24",
                            BirthDate = new DateTime(2021, 4, 20, 11, 12, 48, 67, DateTimeKind.Local).AddTicks(1623),
                            Country = "UK",
                            Gender = "Female",
                            Name = "Keira Knightley",
                            YearsActive = "1993–present"
                        },
                        new
                        {
                            Id = 7,
                            Awards = "36",
                            BirthDate = new DateTime(2021, 4, 20, 11, 12, 48, 67, DateTimeKind.Local).AddTicks(1628),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Tom Cruise",
                            YearsActive = " 1981–present"
                        },
                        new
                        {
                            Id = 8,
                            Awards = "16",
                            BirthDate = new DateTime(2021, 4, 20, 11, 12, 48, 67, DateTimeKind.Local).AddTicks(1635),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Dwayne Johnson-The Rock",
                            YearsActive = " 1999–present"
                        },
                        new
                        {
                            Id = 9,
                            Awards = "99",
                            BirthDate = new DateTime(2021, 4, 20, 11, 12, 48, 67, DateTimeKind.Local).AddTicks(1641),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Leonardo DiCaprio",
                            YearsActive = "1989–present"
                        });
                });

            modelBuilder.Entity("Movieshop.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 11,
                            Name = "History"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Undefined"
                        });
                });

            modelBuilder.Entity("Movieshop.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 11,
                            Name = "History"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Undefined"
                        });
                });

            modelBuilder.Entity("Movieshop.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActersId")
                        .HasColumnType("int");

                    b.Property<string>("ActersName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("Awards")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("GenreName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int");

                    b.Property<string>("ProducerName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<string>("ProductionName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("Realise")
                        .HasColumnType("datetime2");

                    b.Property<double>("TimeLast")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsToWatch")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("ProductionId");

                    b.ToTable("Movie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActersId = 8,
                            ActersName = "Dwayne Johnson-The Rock",
                            Awards = 2,
                            CategoryId = 2,
                            CategoryName = "Action",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 20, 11, 12, 48, 65, DateTimeKind.Local).AddTicks(9011),
                            Description = "In the aftermath of a massive earthquake in California, a rescue-chopper pilot makes a dangerous journey with his ex-wife across the state in order to rescue his daughter.",
                            GenreId = 9,
                            GenreName = "Thriller",
                            Language = "English",
                            Price = 9.9000000000000004,
                            ProducerId = 4,
                            ProducerName = "Jerry Bruckheimer",
                            ProductionId = 7,
                            ProductionName = "New Line Cinema",
                            Rating = 6.0999999999999996,
                            Realise = new DateTime(2021, 4, 20, 11, 12, 48, 65, DateTimeKind.Local).AddTicks(8114),
                            TimeLast = 1.54,
                            Title = "San Andreas",
                            URL = "San_Andreas_poster.jpg",
                            YearsToWatch = 12
                        },
                        new
                        {
                            Id = 2,
                            ActersId = 4,
                            ActersName = "Jason Statham",
                            Awards = 7,
                            CategoryId = 2,
                            CategoryName = "Action",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 20, 11, 12, 48, 66, DateTimeKind.Local).AddTicks(4841),
                            Description = "When a mysterious woman seduces Dominic Toretto into the world of terrorism and a betrayal of those closest to him, the crew face trials that will test them as never before",
                            GenreId = 8,
                            GenreName = "Crime",
                            Language = "English",
                            Price = 6.9900000000000002,
                            ProducerId = 3,
                            ProducerName = "Kevin Feige",
                            ProductionId = 1,
                            ProductionName = "Universal Pictures",
                            Rating = 6.7000000000000002,
                            Realise = new DateTime(2021, 4, 20, 11, 12, 48, 66, DateTimeKind.Local).AddTicks(4803),
                            TimeLast = 2.2400000000000002,
                            Title = "The Fate of the Furious",
                            URL = "fateofthefurious.jpg",
                            YearsToWatch = 16
                        },
                        new
                        {
                            Id = 3,
                            ActersId = 3,
                            ActersName = "Angelina Jolie",
                            Awards = 5,
                            CategoryId = 2,
                            CategoryName = "Action",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 20, 11, 12, 48, 66, DateTimeKind.Local).AddTicks(4951),
                            Description = "A bored married couple is surprised to learn that they are both assassins hired by competing agencies to kill each other.",
                            GenreId = 5,
                            GenreName = "Comedy",
                            Language = "English",
                            Price = 5.4900000000000002,
                            ProducerId = 6,
                            ProducerName = "Kathleen Kennedy",
                            ProductionId = 7,
                            ProductionName = "New Line Cinema",
                            Rating = 6.5,
                            Realise = new DateTime(2021, 4, 20, 11, 12, 48, 66, DateTimeKind.Local).AddTicks(4945),
                            TimeLast = 2.6000000000000001,
                            Title = "Mr. & Mrs. Smith ",
                            URL = "smithFamily.jpg",
                            YearsToWatch = 16
                        },
                        new
                        {
                            Id = 4,
                            ActersId = 1,
                            ActersName = "‎Scott Swan",
                            Awards = 4,
                            CategoryId = 2,
                            CategoryName = "Action",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 20, 11, 12, 48, 66, DateTimeKind.Local).AddTicks(4964),
                            Description = "Mortal Kombat is a mysterious, intergalactic tournament of ancient martial arts.",
                            GenreId = 9,
                            GenreName = "Thriller",
                            Language = "English",
                            Price = 6.8899999999999997,
                            ProducerId = 5,
                            ProducerName = " James Wan, Todd Garner",
                            ProductionId = 4,
                            ProductionName = "Columbia Pictures",
                            Rating = 6.0999999999999996,
                            Realise = new DateTime(2021, 4, 20, 11, 12, 48, 66, DateTimeKind.Local).AddTicks(4960),
                            TimeLast = 1.3300000000000001,
                            Title = "Mortal Kombat II",
                            URL = "mc.jpg",
                            YearsToWatch = 16
                        },
                        new
                        {
                            Id = 5,
                            ActersId = 6,
                            ActersName = " Keira Knightley",
                            Awards = 1,
                            CategoryId = 4,
                            CategoryName = "Drama",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 20, 11, 12, 48, 66, DateTimeKind.Local).AddTicks(4978),
                            Description = "Colette is pushed by her husband to write novels under his name. Upon their success, she fights to make her talents known, challenging gender norms.",
                            GenreId = 10,
                            GenreName = "Biography",
                            Language = "English",
                            Price = 5.79,
                            ProducerId = 6,
                            ProducerName = "Kathleen Kennedy",
                            ProductionId = 3,
                            ProductionName = "20th Century",
                            Rating = 6.7000000000000002,
                            Realise = new DateTime(2021, 4, 20, 11, 12, 48, 66, DateTimeKind.Local).AddTicks(4974),
                            TimeLast = 1.52,
                            Title = "Colette ",
                            URL = "colette.jpg",
                            YearsToWatch = 8
                        },
                        new
                        {
                            Id = 6,
                            ActersId = 7,
                            ActersName = "Tom Cruise",
                            Awards = 5,
                            CategoryId = 5,
                            CategoryName = "Comedy",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 20, 11, 12, 48, 66, DateTimeKind.Local).AddTicks(4990),
                            Description = " talented New York City bartender takes a job at a bar in Jamaica and falls in love.",
                            GenreId = 1,
                            GenreName = "Romance",
                            Language = "English",
                            Price = 6.8899999999999997,
                            ProducerId = 4,
                            ProducerName = "Jerry Bruckheimer",
                            ProductionId = 6,
                            ProductionName = "Universal Studios",
                            Rating = 5.9000000000000004,
                            Realise = new DateTime(2021, 4, 20, 11, 12, 48, 66, DateTimeKind.Local).AddTicks(4985),
                            TimeLast = 1.49,
                            Title = "Cocktail",
                            URL = "coctail.jpg",
                            YearsToWatch = 12
                        },
                        new
                        {
                            Id = 7,
                            ActersId = 9,
                            ActersName = "Leonardo DiCaprio",
                            Awards = 11,
                            CategoryId = 4,
                            CategoryName = "Drama",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 20, 11, 12, 48, 66, DateTimeKind.Local).AddTicks(5001),
                            Description = "A seventeen - year - old aristocrat falls in love with a kind but poor artist aboard the luxurious, ill - fated R.M.S.Titanic.",
                            GenreId = 1,
                            GenreName = "Romance",
                            Language = "English",
                            Price = 9.9900000000000002,
                            ProducerId = 1,
                            ProducerName = "James Cameron",
                            ProductionId = 3,
                            ProductionName = "20th Century",
                            Rating = 7.7999999999999998,
                            Realise = new DateTime(2021, 4, 20, 11, 12, 48, 66, DateTimeKind.Local).AddTicks(4996),
                            TimeLast = 3.2000000000000002,
                            Title = "Titanic",
                            URL = "titanic_.jpg",
                            YearsToWatch = 8
                        });
                });

            modelBuilder.Entity("Movieshop.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MovieCountry")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProducerName")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("ProductionName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TimeLast")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsToWatch")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Movieshop.Entities.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("YearsActive")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Producer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2021, 4, 20, 11, 12, 48, 68, DateTimeKind.Local).AddTicks(4113),
                            Country = "Canada",
                            Gender = "Male",
                            Name = "James Cameron",
                            YearsActive = "1974–present"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2021, 4, 20, 11, 12, 48, 68, DateTimeKind.Local).AddTicks(6509),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Gore Verbinski",
                            YearsActive = "	1989–present"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(2021, 4, 20, 11, 12, 48, 68, DateTimeKind.Local).AddTicks(6570),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Kevin Feige",
                            YearsActive = "2000–present"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(2021, 4, 20, 11, 12, 48, 68, DateTimeKind.Local).AddTicks(6577),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Jerry Bruckheimer",
                            YearsActive = "1972–present"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(2021, 4, 20, 11, 12, 48, 68, DateTimeKind.Local).AddTicks(6583),
                            Country = "UK",
                            Gender = "Male",
                            Name = "David Heyman",
                            YearsActive = "1992-present"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(2021, 4, 20, 11, 12, 48, 68, DateTimeKind.Local).AddTicks(6588),
                            Country = "USA",
                            Gender = "Female",
                            Name = "Kathleen Kennedy",
                            YearsActive = "1979–present"
                        });
                });

            modelBuilder.Entity("Movieshop.Entities.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Production");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "USA",
                            Name = "Universal Pictures",
                            Year = new DateTime(2021, 4, 20, 11, 12, 48, 67, DateTimeKind.Local).AddTicks(9977)
                        },
                        new
                        {
                            Id = 2,
                            Country = "USA",
                            Name = "Warner Brothers",
                            Year = new DateTime(2021, 4, 20, 11, 12, 48, 68, DateTimeKind.Local).AddTicks(847)
                        },
                        new
                        {
                            Id = 3,
                            Country = "USA",
                            Name = "20th Century",
                            Year = new DateTime(2021, 4, 20, 11, 12, 48, 68, DateTimeKind.Local).AddTicks(885)
                        },
                        new
                        {
                            Id = 4,
                            Country = "USA",
                            Name = "Columbia Pictures",
                            Year = new DateTime(2021, 4, 20, 11, 12, 48, 68, DateTimeKind.Local).AddTicks(891)
                        },
                        new
                        {
                            Id = 5,
                            Country = "USA",
                            Name = "Walt Disney Pictures",
                            Year = new DateTime(2021, 4, 20, 11, 12, 48, 68, DateTimeKind.Local).AddTicks(897)
                        },
                        new
                        {
                            Id = 6,
                            Country = "USA",
                            Name = "Universal Studios",
                            Year = new DateTime(2021, 4, 20, 11, 12, 48, 68, DateTimeKind.Local).AddTicks(902)
                        },
                        new
                        {
                            Id = 7,
                            Country = "USA",
                            Name = "New Line Cinema",
                            Year = new DateTime(2021, 4, 20, 11, 12, 48, 68, DateTimeKind.Local).AddTicks(907)
                        });
                });

            modelBuilder.Entity("Movieshop.Entities.ShoppingCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCard");
                });

            modelBuilder.Entity("Movieshop.Entities.WatchLatter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WatchLatter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Movieshop.Entities.Movie", b =>
                {
                    b.HasOne("Movieshop.Entities.Actor", "Actor")
                        .WithMany("Movie")
                        .HasForeignKey("ActorId");

                    b.HasOne("Movieshop.Entities.Category", "Category")
                        .WithMany("Movie")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movieshop.Entities.Genre", "Genre")
                        .WithMany("Movie")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movieshop.Entities.Producer", "Producer")
                        .WithMany("Movie")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movieshop.Entities.Production", "Production")
                        .WithMany("Movie")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
