// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movieshop.Data;

namespace Movieshop.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210421102544_add_areas_identity")]
    partial class add_areas_identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "b4280b6a-0613-4cbd-a9e6-f1701e926e73",
                            ConcurrencyStamp = "001f6dd2-78ee-4027-a148-fe9676b10df2",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b4280b6a -0613-4cbd-a9e6-f1701e926e74",
                            ConcurrencyStamp = "77aa9be7-7c9f-4bcd-a4e9-6e59af57d30e",
                            Name = "editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "b4280b6a-0613-4cbd-a9e6-f1701e926e75",
                            ConcurrencyStamp = "9c913ade-3495-4f57-86e3-c28b7ab0d081",
                            Name = "guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b4280b6a-0613-4cbd-a9e6-f1701e926e73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266 -b401-4519-9aeb-a9283053fc58",
                            Email = "admin@movieshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MOVIESHOP.COM",
                            NormalizedUserName = "ADMIN@MOVIESHOP.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAUfldfHpxgLgr1m6bo8YruaJJvKG5y8SmjrfSybERsenYIyBD1Z4J8ZGiaRuFw7ow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin@movieshop.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b4280b6a-0613-4cbd-a9e6-f1701e926e73",
                            RoleId = "b4280b6a-0613-4cbd-a9e6-f1701e926e73"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Movieshop.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Awards")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("YearsActive")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Awards = "33",
                            BirthDate = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(8190),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Silvester Stalone",
                            YearsActive = "1968–present"
                        },
                        new
                        {
                            Id = 2,
                            Awards = "119",
                            BirthDate = new DateTime(2021, 4, 21, 12, 25, 43, 602, DateTimeKind.Local).AddTicks(1863),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Brad Pitt",
                            YearsActive = " 1987–present"
                        },
                        new
                        {
                            Id = 3,
                            Awards = "60",
                            BirthDate = new DateTime(2021, 4, 21, 12, 25, 43, 602, DateTimeKind.Local).AddTicks(1941),
                            Country = "USA",
                            Gender = "Female",
                            Name = "Angelina Jolie",
                            YearsActive = "1982–present"
                        },
                        new
                        {
                            Id = 4,
                            Awards = "1",
                            BirthDate = new DateTime(2021, 4, 21, 12, 25, 43, 602, DateTimeKind.Local).AddTicks(1948),
                            Country = "UK",
                            Gender = "Male",
                            Name = "Jason Statham",
                            YearsActive = "1993–present"
                        },
                        new
                        {
                            Id = 5,
                            Awards = "61",
                            BirthDate = new DateTime(2021, 4, 21, 12, 25, 43, 602, DateTimeKind.Local).AddTicks(1956),
                            Country = "USA",
                            Gender = "Female",
                            Name = "Julia Roberts",
                            YearsActive = " 1987–present"
                        },
                        new
                        {
                            Id = 6,
                            Awards = "24",
                            BirthDate = new DateTime(2021, 4, 21, 12, 25, 43, 602, DateTimeKind.Local).AddTicks(1962),
                            Country = "UK",
                            Gender = "Female",
                            Name = "Keira Knightley",
                            YearsActive = "1993–present"
                        },
                        new
                        {
                            Id = 7,
                            Awards = "36",
                            BirthDate = new DateTime(2021, 4, 21, 12, 25, 43, 602, DateTimeKind.Local).AddTicks(1968),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Tom Cruise",
                            YearsActive = " 1981–present"
                        },
                        new
                        {
                            Id = 8,
                            Awards = "16",
                            BirthDate = new DateTime(2021, 4, 21, 12, 25, 43, 602, DateTimeKind.Local).AddTicks(1974),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Dwayne Johnson-The Rock",
                            YearsActive = " 1999–present"
                        },
                        new
                        {
                            Id = 9,
                            Awards = "99",
                            BirthDate = new DateTime(2021, 4, 21, 12, 25, 43, 602, DateTimeKind.Local).AddTicks(1980),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Leonardo DiCaprio",
                            YearsActive = "1989–present"
                        });
                });

            modelBuilder.Entity("Movieshop.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 11,
                            Name = "History"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Undefined"
                        });
                });

            modelBuilder.Entity("Movieshop.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 11,
                            Name = "History"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Undefined"
                        });
                });

            modelBuilder.Entity("Movieshop.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActersId")
                        .HasColumnType("int");

                    b.Property<string>("ActersName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("Awards")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("GenreName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int");

                    b.Property<string>("ProducerName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<string>("ProductionName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("Realise")
                        .HasColumnType("datetime2");

                    b.Property<double>("TimeLast")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsToWatch")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("ProductionId");

                    b.ToTable("Movie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActersId = 8,
                            ActersName = "Vojche",
                            Awards = 2,
                            CategoryId = 2,
                            CategoryName = "Action",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 21, 12, 25, 43, 600, DateTimeKind.Local).AddTicks(8612),
                            Description = "Kong and his protectors undertake a perilous journey to find his true home. Along for the ride is Jia, an orphaned girl who has a unique and powerful bond with the mighty beast. However, they soon find themselves in the path of an enraged Godzilla as he cuts a swath of destruction across the globe.",
                            GenreId = 9,
                            GenreName = "Thriller",
                            Language = "English",
                            Price = 9.9000000000000004,
                            ProducerId = 4,
                            ProducerName = "Thomas Tull, Jon Jashni",
                            ProductionId = 7,
                            ProductionName = " Legendary Pictures",
                            Rating = 6.0999999999999996,
                            Realise = new DateTime(2021, 4, 21, 12, 25, 43, 600, DateTimeKind.Local).AddTicks(7419),
                            TimeLast = 1.54,
                            Title = "Godzilla vs. Kong",
                            URL = "godzilla-king-of-the-monsters-movie-poster-image0.jpg",
                            YearsToWatch = 12
                        },
                        new
                        {
                            Id = 2,
                            ActersId = 4,
                            ActersName = "Jorgos",
                            Awards = 7,
                            CategoryId = 2,
                            CategoryName = "Action",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(5021),
                            Description = "Behind our world, there is another -- a world of dangerous and powerful monsters that rule their domain with deadly ferocity. When Lt. Artemis and her loyal soldiers are transported from our world to the new one, the unflappable lieutenant receives the shock of her life. In a desperate battle for survival against enormous enemies with incredible powers and unstoppable, terrifying attacks, Artemis teams up with a mysterious hunter who has found a way to fight back.",
                            GenreId = 8,
                            GenreName = "Crime",
                            Language = "English",
                            Price = 6.9900000000000002,
                            ProducerId = 3,
                            ProducerName = " Paul W. S. Anderson, Martin Moszkowicz",
                            ProductionId = 1,
                            ProductionName = "Universal Pictures",
                            Rating = 6.7000000000000002,
                            Realise = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(4981),
                            TimeLast = 2.2400000000000002,
                            Title = "Monster Hunter",
                            URL = "monster.jpg",
                            YearsToWatch = 16
                        },
                        new
                        {
                            Id = 3,
                            ActersId = 3,
                            ActersName = "Martin",
                            Awards = 5,
                            CategoryId = 2,
                            CategoryName = "Action",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(5212),
                            Description = "Diana Prince lives quietly among mortals in the vibrant, sleek 1980s -- an era of excess driven by the pursuit of having it all. Though she's come into her full powers, she maintains a low profile by curating ancient artifacts, and only performing heroic acts incognito. But soon, Diana will have to muster all of her strength, wisdom and courage as she finds herself squaring off against Maxwell Lord and the Cheetah, a villainess who possesses superhuman strength and agility.",
                            GenreId = 5,
                            GenreName = "Action",
                            Language = "English",
                            Price = 5.4900000000000002,
                            ProducerId = 6,
                            ProducerName = "Charles Roven",
                            ProductionId = 7,
                            ProductionName = "Warner Bros.Pictures, DC Films",
                            Rating = 6.5,
                            Realise = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(5206),
                            TimeLast = 2.6000000000000001,
                            Title = "Wonder Woman 1984",
                            URL = "ww84.jpg",
                            YearsToWatch = 16
                        },
                        new
                        {
                            Id = 4,
                            ActersId = 1,
                            ActersName = "‎Stefan",
                            Awards = 4,
                            CategoryId = 2,
                            CategoryName = "Action",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(5226),
                            Description = "Mortal Kombat is a mysterious, intergalactic tournament of ancient martial arts.",
                            GenreId = 9,
                            GenreName = "Thriller",
                            Language = "English",
                            Price = 6.8899999999999997,
                            ProducerId = 5,
                            ProducerName = " James Wan, Todd Garner",
                            ProductionId = 4,
                            ProductionName = "Columbia Pictures",
                            Rating = 6.0999999999999996,
                            Realise = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(5221),
                            TimeLast = 1.3300000000000001,
                            Title = "Mortal Kombat II",
                            URL = "mc.jfif",
                            YearsToWatch = 16
                        },
                        new
                        {
                            Id = 5,
                            ActersId = 6,
                            ActersName = "Tim Story",
                            Awards = 1,
                            CategoryId = 4,
                            CategoryName = "Animation",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(5239),
                            Description = "A legendary rivalry reemerges when Jerry moves into New York City's finest hotel on the eve of the wedding of the century, forcing the desperate event planner to hire Tom to get rid of him. As mayhem ensues, the escalating cat-and-mouse battle soon threatens to destroy her career, the wedding, and possibly the hotel itself.",
                            GenreId = 10,
                            GenreName = "Biography",
                            Language = "English",
                            Price = 6.9900000000000002,
                            ProducerId = 6,
                            ProducerName = "Chris DeFaria",
                            ProductionId = 3,
                            ProductionName = "Warner Animation Group",
                            Rating = 6.7000000000000002,
                            Realise = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(5235),
                            TimeLast = 1.52,
                            Title = "Tom and Jerry",
                            URL = "tomandjery.jpg",
                            YearsToWatch = 8
                        },
                        new
                        {
                            Id = 6,
                            ActersId = 7,
                            ActersName = "Yolanthe Sneijder-Cabau",
                            Awards = 5,
                            CategoryId = 5,
                            CategoryName = "Comedy",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(5251),
                            Description = "Incurable romantic Lotte finds her life upended when her plans for a picture-perfect wedding unravel -- just as her self-absorbed sister gets engaged.",
                            GenreId = 1,
                            GenreName = "Romance",
                            Language = "English",
                            Price = 5.5899999999999999,
                            ProducerId = 4,
                            ProducerName = "Nikola",
                            ProductionId = 6,
                            ProductionName = "AM Pictures",
                            Rating = 5.9000000000000004,
                            Realise = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(5246),
                            TimeLast = 1.49,
                            Title = "Just Say Yes",
                            URL = "justsayyees.jpg",
                            YearsToWatch = 12
                        },
                        new
                        {
                            Id = 7,
                            ActersId = 9,
                            ActersName = "Leonardo DiCaprio",
                            Awards = 11,
                            CategoryId = 4,
                            CategoryName = "Action",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(5262),
                            Description = "US agent Luke Hobbs and British mercenary Deckard Shaw are forced to put their rivalry side and work together to stop a genetically enhanced supervillain.",
                            GenreId = 1,
                            GenreName = "Adventure",
                            Language = "English",
                            Price = 9.9900000000000002,
                            ProducerId = 1,
                            ProducerName = "Chris Morgan",
                            ProductionId = 3,
                            ProductionName = "Seven Bucks Productions",
                            Rating = 7.7999999999999998,
                            Realise = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(5258),
                            TimeLast = 3.2000000000000002,
                            Title = "Fast & Furious",
                            URL = "Hobbs.jfif",
                            YearsToWatch = 8
                        },
                        new
                        {
                            Id = 8,
                            ActersId = 9,
                            ActersName = "Ljupce",
                            Awards = 11,
                            CategoryId = 4,
                            CategoryName = "Action",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(5273),
                            Description = "An assassin becomes marked for death by her own black ops organization after questioning orders and breaking protocol.",
                            GenreId = 1,
                            GenreName = "Crime",
                            Language = "English",
                            Price = 6.9900000000000002,
                            ProducerId = 1,
                            ProducerName = " Jessica Chastain",
                            ProductionId = 3,
                            ProductionName = "Voltage Pictures",
                            Rating = 7.7999999999999998,
                            Realise = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(5269),
                            TimeLast = 3.2000000000000002,
                            Title = "Ava",
                            URL = "ava.jpg",
                            YearsToWatch = 8
                        },
                        new
                        {
                            Id = 9,
                            ActersId = 9,
                            ActersName = "Kristian",
                            Awards = 11,
                            CategoryId = 4,
                            CategoryName = "Action",
                            Country = "USA",
                            DateAdded = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(5286),
                            Description = "Detectives Mike Lowrey and Marcus Burnett join the Miami Police Department's special team AMMO to bring down the ruthless Armando, who is on a mission to kill Mike at his mother Isabel's orders.",
                            GenreId = 1,
                            GenreName = "Adventure",
                            Language = "English",
                            Price = 8.0999999999999996,
                            ProducerId = 1,
                            ProducerName = "Will Smith, Jerry Bruckheimer, Doug Belgrad, Даг Белград",
                            ProductionId = 3,
                            ProductionName = "Columbia Pictures",
                            Rating = 7.7999999999999998,
                            Realise = new DateTime(2021, 4, 21, 12, 25, 43, 601, DateTimeKind.Local).AddTicks(5281),
                            TimeLast = 3.2000000000000002,
                            Title = "Bad Boys",
                            URL = "badboys.jpg",
                            YearsToWatch = 8
                        });
                });

            modelBuilder.Entity("Movieshop.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MovieCountry")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProducerName")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("ProductionName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TimeLast")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsToWatch")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Movieshop.Entities.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("YearsActive")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Producer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2021, 4, 21, 12, 25, 43, 603, DateTimeKind.Local).AddTicks(5834),
                            Country = "Canada",
                            Gender = "Male",
                            Name = "James Cameron",
                            YearsActive = "1974–present"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2021, 4, 21, 12, 25, 43, 603, DateTimeKind.Local).AddTicks(8321),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Gore Verbinski",
                            YearsActive = "	1989–present"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(2021, 4, 21, 12, 25, 43, 603, DateTimeKind.Local).AddTicks(8373),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Kevin Feige",
                            YearsActive = "2000–present"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(2021, 4, 21, 12, 25, 43, 603, DateTimeKind.Local).AddTicks(8380),
                            Country = "USA",
                            Gender = "Male",
                            Name = "Jerry Bruckheimer",
                            YearsActive = "1972–present"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(2021, 4, 21, 12, 25, 43, 603, DateTimeKind.Local).AddTicks(8387),
                            Country = "UK",
                            Gender = "Male",
                            Name = "David Heyman",
                            YearsActive = "1992-present"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(2021, 4, 21, 12, 25, 43, 603, DateTimeKind.Local).AddTicks(8392),
                            Country = "USA",
                            Gender = "Female",
                            Name = "Kathleen Kennedy",
                            YearsActive = "1979–present"
                        });
                });

            modelBuilder.Entity("Movieshop.Entities.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Production");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "USA",
                            Name = "Universal Pictures",
                            Year = new DateTime(2021, 4, 21, 12, 25, 43, 603, DateTimeKind.Local).AddTicks(1354)
                        },
                        new
                        {
                            Id = 2,
                            Country = "USA",
                            Name = "Warner Brothers",
                            Year = new DateTime(2021, 4, 21, 12, 25, 43, 603, DateTimeKind.Local).AddTicks(2363)
                        },
                        new
                        {
                            Id = 3,
                            Country = "USA",
                            Name = "20th Century",
                            Year = new DateTime(2021, 4, 21, 12, 25, 43, 603, DateTimeKind.Local).AddTicks(2399)
                        },
                        new
                        {
                            Id = 4,
                            Country = "USA",
                            Name = "Columbia Pictures",
                            Year = new DateTime(2021, 4, 21, 12, 25, 43, 603, DateTimeKind.Local).AddTicks(2406)
                        },
                        new
                        {
                            Id = 5,
                            Country = "USA",
                            Name = "Walt Disney Pictures",
                            Year = new DateTime(2021, 4, 21, 12, 25, 43, 603, DateTimeKind.Local).AddTicks(2412)
                        },
                        new
                        {
                            Id = 6,
                            Country = "USA",
                            Name = "Universal Studios",
                            Year = new DateTime(2021, 4, 21, 12, 25, 43, 603, DateTimeKind.Local).AddTicks(2418)
                        },
                        new
                        {
                            Id = 7,
                            Country = "USA",
                            Name = "New Line Cinema",
                            Year = new DateTime(2021, 4, 21, 12, 25, 43, 603, DateTimeKind.Local).AddTicks(2426)
                        });
                });

            modelBuilder.Entity("Movieshop.Entities.ShoppingCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCard");
                });

            modelBuilder.Entity("Movieshop.Entities.WatchLatter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WatchLatter");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Movieshop.Entities.Movie", b =>
                {
                    b.HasOne("Movieshop.Entities.Actor", "Actor")
                        .WithMany("Movie")
                        .HasForeignKey("ActorId");

                    b.HasOne("Movieshop.Entities.Category", "Category")
                        .WithMany("Movie")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movieshop.Entities.Genre", "Genre")
                        .WithMany("Movie")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movieshop.Entities.Producer", "Producer")
                        .WithMany("Movie")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movieshop.Entities.Production", "Production")
                        .WithMany("Movie")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
